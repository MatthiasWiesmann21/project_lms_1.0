datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?  @default(0)
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  colorCode   String? @default("#000000")
  isPublished Boolean @default(false)
  
  courses Course[]
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Attachment {
  id   String @id @default(uuid())
  name String @db.Text
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  postId String
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([postId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Newsletter subscription Model

model NewsletterSubscription {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  email     String   @unique
  message   String?  @db.Text
  createdAt DateTime @default(now())
}



// Document Uploading 

model File {
  id       Int     @id @default(autoincrement())
  type     String?
  name     String
  key      String  @db.Text
  userId   String 
  folderId Int
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  status  FileStatus @default(PENDING )

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([folderId])
}
enum FileStatus{
  PENDING
  UPLOADED
}
 
 
model Folder {
  id             Int     @id @default(autoincrement())
  name           String
  key            String  @db.Text
  userId         String  
  files          File[]
  parentFolderId Int?
  parentFolder   Folder? @relation("SubFolders", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  subFolders Folder[] @relation("SubFolders") // Define the opposite relation here

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentFolderId])
}

// TODO: Global Color Settings

// TODO: Post Model

model Post {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}
